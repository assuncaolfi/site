[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Blog",
    "section": "",
    "text": "Nov 17, 2023\n\n\nNon-monotonic models\n\n\n\n\nSep 21, 2023\n\n\nPicking a fantasy football team\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "blog/fantasy-football/index.html",
    "href": "blog/fantasy-football/index.html",
    "title": "Picking a fantasy football team",
    "section": "",
    "text": "Cartola FC is a fantasy football league following the Brazilian Championship A Series.\nCartola offers a public API to access data for the current round. A couple of years ago, I created a script to automate data retrieval to a repository, which now hosts comprehensive historical data since 2022.\nIn this post, I will delve into the data for the 2022 season, formulate a mixed integer linear program to pick the optimal team, and present initial concepts for forecasting player scores using mixed effects linear models."
  },
  {
    "objectID": "blog/fantasy-football/index.html#the-rules",
    "href": "blog/fantasy-football/index.html#the-rules",
    "title": "Picking a fantasy football team",
    "section": "The rules",
    "text": "The rules\nYou begin the season with a budget of C$ 100 (C$ stands for Cartoletas, the game’s paper currency).\nEach round is preceded by a market session, where players are assigned a value. You are tasked with forming a team of 11 players plus a coach, all within your budget and adhering to a valid formation. A captain must be chosen from among the players, excluding the coach.\nThe market is available until the round starts. Players then earn scores based on their real-life match performances. Your team’s score is the aggregate of your players’ scores, with your captain’s score doubled in the 2022 season.\nFollowing the conclusion of the round, player values are recalibrated based on performance -— with increases for scores above their average and decreases for below-average performances. Your budget for the next round is your previous budget, plus the sum of your players’ value variations."
  },
  {
    "objectID": "blog/fantasy-football/index.html#data-wrangling",
    "href": "blog/fantasy-football/index.html#data-wrangling",
    "title": "Picking a fantasy football team",
    "section": "Data wrangling",
    "text": "Data wrangling\nFirst, let’s talk about data structures. Each round has a market, and each market is a list of players. A player is a structure like this:\n\n\nPlayer(\n│   round=0,\n│   player=42234,\n│   team=264,\n│   position=1,\n│   games=0,\n│   average=0.0,\n│   value=10.0,\n│   score=0.0,\n│   appreciation=0.0,\n│   minimum=4.53\n)\n\n\n\nLet’s get the list of markets for 2022 and flatten it into a single DataFrame:\n\n\nshape: (30_063, 10)\n┌───────┬────────┬──────┬──────────┬───┬───────┬───────┬──────────────┬─────────┐\n│ round ┆ player ┆ team ┆ position ┆ … ┆ value ┆ score ┆ appreciation ┆ minimum │\n│ ---   ┆ ---    ┆ ---  ┆ ---      ┆   ┆ ---   ┆ ---   ┆ ---          ┆ ---     │\n│ i64   ┆ i64    ┆ i64  ┆ i64      ┆   ┆ f64   ┆ f64   ┆ f64          ┆ f64     │\n╞═══════╪════════╪══════╪══════════╪═══╪═══════╪═══════╪══════════════╪═════════╡\n│ 1     ┆ 37424  ┆ 1371 ┆ 6        ┆ … ┆ 3.0   ┆ 0.0   ┆ 0.0          ┆ 0.0     │\n│ 1     ┆ 37646  ┆ 314  ┆ 3        ┆ … ┆ 5.0   ┆ 0.0   ┆ 0.0          ┆ 2.3     │\n│ 1     ┆ 37656  ┆ 266  ┆ 1        ┆ … ┆ 9.0   ┆ 0.0   ┆ 0.0          ┆ 4.08    │\n│ 1     ┆ 37788  ┆ 356  ┆ 1        ┆ … ┆ 4.0   ┆ 0.0   ┆ 0.0          ┆ 1.85    │\n│ …     ┆ …      ┆ …    ┆ …        ┆ … ┆ …     ┆ …     ┆ …            ┆ …       │\n│ 38    ┆ 121397 ┆ 286  ┆ 2        ┆ … ┆ 1.0   ┆ 0.0   ┆ 0.0          ┆ 0.0     │\n│ 38    ┆ 121398 ┆ 354  ┆ 4        ┆ … ┆ 1.0   ┆ 0.0   ┆ 0.0          ┆ 0.0     │\n│ 38    ┆ 121399 ┆ 354  ┆ 4        ┆ … ┆ 1.0   ┆ 0.0   ┆ 0.0          ┆ 0.0     │\n│ 38    ┆ 121400 ┆ 354  ┆ 5        ┆ … ┆ 1.0   ┆ 0.0   ┆ 0.0          ┆ 0.0     │\n└───────┴────────┴──────┴──────────┴───┴───────┴───────┴──────────────┴─────────┘\n\n\n\nNow, let’s focus on a specific player to illustrate our data while we wrangle it:\n\n\nshape: (38, 10)\n┌───────┬────────┬──────┬──────────┬───┬───────┬───────┬──────────────┬─────────┐\n│ round ┆ player ┆ team ┆ position ┆ … ┆ value ┆ score ┆ appreciation ┆ minimum │\n│ ---   ┆ ---    ┆ ---  ┆ ---      ┆   ┆ ---   ┆ ---   ┆ ---          ┆ ---     │\n│ i64   ┆ i64    ┆ i64  ┆ i64      ┆   ┆ f64   ┆ f64   ┆ f64          ┆ f64     │\n╞═══════╪════════╪══════╪══════════╪═══╪═══════╪═══════╪══════════════╪═════════╡\n│ 1     ┆ 42234  ┆ 264  ┆ 1        ┆ … ┆ 10.0  ┆ 0.0   ┆ 0.0          ┆ 4.53    │\n│ 2     ┆ 42234  ┆ 264  ┆ 1        ┆ … ┆ 7.93  ┆ 2.0   ┆ -2.07        ┆ 5.52    │\n│ 3     ┆ 42234  ┆ 264  ┆ 1        ┆ … ┆ 10.44 ┆ 11.0  ┆ 2.51         ┆ 4.75    │\n│ 4     ┆ 42234  ┆ 264  ┆ 1        ┆ … ┆ 10.44 ┆ 0.0   ┆ 0.0          ┆ 5.78    │\n│ …     ┆ …      ┆ …    ┆ …        ┆ … ┆ …     ┆ …     ┆ …            ┆ …       │\n│ 35    ┆ 42234  ┆ 264  ┆ 1        ┆ … ┆ 11.48 ┆ 0.0   ┆ -0.71        ┆ 3.55    │\n│ 36    ┆ 42234  ┆ 264  ┆ 1        ┆ … ┆ 11.51 ┆ 0.0   ┆ 0.03         ┆ 3.63    │\n│ 37    ┆ 42234  ┆ 264  ┆ 1        ┆ … ┆ 12.68 ┆ 0.0   ┆ 1.17         ┆ 9.29    │\n│ 38    ┆ 42234  ┆ 264  ┆ 1        ┆ … ┆ 11.06 ┆ 0.0   ┆ -1.62        ┆ 1.37    │\n└───────┴────────┴──────┴──────────┴───┴───────┴───────┴──────────────┴─────────┘\n\n\n\n\nFiltering participation\nPlayers will show up in the market for many rounds that they do not participate in. However, for our analysis, we are only interested in players that actually played a game in the round.\nEach player has a status field that is supposed to indicate whether they will participate in the round. However, I’ve noticed this field is often inacurate, probably because the API data for this field is updated before the round is.\nOne solution is to keep only rows where there is an increase in the number of games the player has played:\n\n\nshape: (31, 3)\n┌────────┬───────┬───────┐\n│ player ┆ round ┆ games │\n│ ---    ┆ ---   ┆ ---   │\n│ i64    ┆ i64   ┆ i64   │\n╞════════╪═══════╪═══════╡\n│ 42234  ┆ 1     ┆ 0     │\n│ 42234  ┆ 2     ┆ 1     │\n│ 42234  ┆ 3     ┆ 2     │\n│ 42234  ┆ 5     ┆ 3     │\n│ …      ┆ …     ┆ …     │\n│ 42234  ┆ 35    ┆ 27    │\n│ 42234  ┆ 36    ┆ 28    │\n│ 42234  ┆ 37    ┆ 29    │\n│ 42234  ┆ 38    ┆ 30    │\n└────────┴───────┴───────┘\n\n\n\n\n\nImputing scores\nAnother field that is inacurate is the player score, probably for the same reason as their status. Fortunately, the average field is accurate, and we can use it to recover the score. Let \\(\\mathbf{s}\\) be the vector of scores for a given player across all rounds:\n\\[\n\\begin{align*}\n\\mathrm{Average}(\\mathbf{s}_{1:t})\n= \\frac{\\mathrm{Average}(\\mathbf{s}_{1:(t-1)}) + s_t}{2} \\\\\ns_t\n= 2\\mathrm{Average}(\\mathbf{s}_{1:t}) - \\mathrm{Average}(\\mathbf{s}_{1:(t-1)})\n\\end{align*}\n\\]\n\n\nshape: (31, 4)\n┌────────┬───────┬───────┬─────────┐\n│ player ┆ round ┆ score ┆ average │\n│ ---    ┆ ---   ┆ ---   ┆ ---     │\n│ i64    ┆ i64   ┆ f64   ┆ f64     │\n╞════════╪═══════╪═══════╪═════════╡\n│ 42234  ┆ 1     ┆ 2.0   ┆ 2.0     │\n│ 42234  ┆ 2     ┆ 11.0  ┆ 6.5     │\n│ 42234  ┆ 3     ┆ 9.5   ┆ 8.0     │\n│ 42234  ┆ 5     ┆ 8.6   ┆ 8.3     │\n│ …      ┆ …     ┆ …     ┆ …       │\n│ 42234  ┆ 35    ┆ 4.73  ┆ 4.82    │\n│ 42234  ┆ 36    ┆ 5.1   ┆ 4.96    │\n│ 42234  ┆ 37    ┆ 4.62  ┆ 4.79    │\n│ 42234  ┆ 38    ┆ 4.79  ┆ 4.79    │\n└────────┴───────┴───────┴─────────┘\n\n\n\n\n\nAdding fixtures\nLet’s fetch the list of fixtures to enrich our dataset. A fixture is an object like:\n\n\nFixture(round=1, home=282, away=285)\n\n\n\nLet’s flatten these fixtures into a single DataFrame and pivot it into a long format:\n\n\nshape: (760, 4)\n┌───────┬──────┬────────┬──────┐\n│ round ┆ team ┆ versus ┆ home │\n│ ---   ┆ ---  ┆ ---    ┆ ---  │\n│ i64   ┆ i64  ┆ i64    ┆ i32  │\n╞═══════╪══════╪════════╪══════╡\n│ 1     ┆ 282  ┆ 285    ┆ 1    │\n│ 1     ┆ 266  ┆ 277    ┆ 1    │\n│ 1     ┆ 276  ┆ 293    ┆ 1    │\n│ 1     ┆ 373  ┆ 262    ┆ 1    │\n│ …     ┆ …    ┆ …      ┆ …    │\n│ 38    ┆ 286  ┆ 354    ┆ 0    │\n│ 38    ┆ 276  ┆ 290    ┆ 0    │\n│ 38    ┆ 294  ┆ 1371   ┆ 0    │\n│ 38    ┆ 263  ┆ 293    ┆ 0    │\n└───────┴──────┴────────┴──────┘\n\n\n\nFinally, let’s join it to our dataset:\n\n\nshape: (31, 5)\n┌────────┬───────┬──────┬────────┬──────┐\n│ player ┆ round ┆ team ┆ versus ┆ home │\n│ ---    ┆ ---   ┆ ---  ┆ ---    ┆ ---  │\n│ i64    ┆ i64   ┆ i64  ┆ i64    ┆ i32  │\n╞════════╪═══════╪══════╪════════╪══════╡\n│ 42234  ┆ 1     ┆ 264  ┆ 263    ┆ 0    │\n│ 42234  ┆ 2     ┆ 264  ┆ 314    ┆ 1    │\n│ 42234  ┆ 3     ┆ 264  ┆ 275    ┆ 0    │\n│ 42234  ┆ 5     ┆ 264  ┆ 280    ┆ 0    │\n│ …      ┆ …     ┆ …    ┆ …      ┆ …    │\n│ 42234  ┆ 35    ┆ 264  ┆ 262    ┆ 0    │\n│ 42234  ┆ 36    ┆ 264  ┆ 354    ┆ 1    │\n│ 42234  ┆ 37    ┆ 264  ┆ 294    ┆ 0    │\n│ 42234  ┆ 38    ┆ 264  ┆ 282    ┆ 1    │\n└────────┴───────┴──────┴────────┴──────┘\n\n\n\n\n\nAligning variables\nFor the rest of our analysis, the average field should not include the score in the given round. Also, the appreciation field should be relative to the score in the given round.\n\n\nshape: (31, 6)\n┌────────┬───────┬─────────┬───────┬───────┬──────────────┐\n│ player ┆ round ┆ average ┆ value ┆ score ┆ appreciation │\n│ ---    ┆ ---   ┆ ---     ┆ ---   ┆ ---   ┆ ---          │\n│ i64    ┆ i64   ┆ f64     ┆ f64   ┆ f64   ┆ f64          │\n╞════════╪═══════╪═════════╪═══════╪═══════╪══════════════╡\n│ 42234  ┆ 1     ┆ 0.0     ┆ 10.0  ┆ 2.0   ┆ -2.07        │\n│ 42234  ┆ 2     ┆ 2.0     ┆ 7.93  ┆ 11.0  ┆ 2.51         │\n│ 42234  ┆ 3     ┆ 6.5     ┆ 10.44 ┆ 9.5   ┆ 1.25         │\n│ 42234  ┆ 5     ┆ 8.0     ┆ 11.69 ┆ 8.6   ┆ 0.73         │\n│ …      ┆ …     ┆ …       ┆ …     ┆ …     ┆ …            │\n│ 42234  ┆ 35    ┆ 4.91    ┆ 11.48 ┆ 4.73  ┆ 0.03         │\n│ 42234  ┆ 36    ┆ 4.82    ┆ 11.51 ┆ 5.1   ┆ 1.17         │\n│ 42234  ┆ 37    ┆ 4.96    ┆ 12.68 ┆ 4.62  ┆ -1.62        │\n│ 42234  ┆ 38    ┆ 4.79    ┆ 11.06 ┆ 4.79  ┆ 0.0          │\n└────────┴───────┴─────────┴───────┴───────┴──────────────┘"
  },
  {
    "objectID": "blog/fantasy-football/index.html#team-picking",
    "href": "blog/fantasy-football/index.html#team-picking",
    "title": "Picking a fantasy football team",
    "section": "Team picking",
    "text": "Team picking\n\nProblem\nHow to pick the best team in a given market? Let \\(\\mathcal{F}\\) be the set of valid formations, for each formation \\(f \\in \\mathcal{F}\\), solve:\n\\[\n\\begin{equation*} \\begin{array}{ll@{}ll}\n\\text{maximize} & \\displaystyle \\hat{\\mathbf{s}}^T \\mathbf{x}, & \\mathbf{x} \\in \\{\\mathbf{0}, \\mathbf{1}\\} \\\\\n\\text{subject to}\n& \\displaystyle \\mathbf{v}^T \\mathbf{x} \\leq b \\\\\n& \\displaystyle \\mathbf{P}^T \\mathbf{x} = f, \\\\\n\\end{array} \\end{equation*}\n\\]\nwhere\n\\(\\mathbf{x}\\) is a variable vector of player picks in the market;\n\\(\\hat{\\mathbf{s}}\\) is the vector of predicted player scores in the market;\n\\(b\\) is your available budget for that round;\n\\(\\mathbf{P}\\) is the matrix of dummy-encoded player formations in the market.\nFinally, take the solution with the highest objective.\n\nclass Problem(BaseModel):\n    scores: List[float]\n    values: List[float]\n    budget: float\n    positions: List[List[int]]\n    formations: List[Formation]\n\n    def solve(self) -&gt; List[pulp.LpSolution]:\n        formations = [list(f.model_dump().values()) for f in self.formations]\n        problems = [self.construct(f) for f in formations]\n        [p.solve(pulp.COIN(msg=False)) for p in problems]\n        objectives = [p.objective.value() for p in problems]\n        best = np.argmax(np.array(objectives))\n        solution = problems[best]\n        variables = [v.value() for v in solution.variables()]\n        picks = np.array(variables)\n        return picks\n\n    def construct(self, formation: List[int]) -&gt; pulp.LpProblem:\n        n = len(self.scores)\n        m = len(formation)\n        problem = pulp.LpProblem(\"team_picking\", pulp.LpMaximize)\n        indexes = [\"pick_\" + str(i).zfill(len(str(n))) for i in range(n)]\n        picks = [pulp.LpVariable(i, cat=pulp.const.LpBinary) for i in indexes]\n        problem += pulp.lpDot(picks, self.scores)\n        problem += pulp.lpDot(picks, self.values) &lt;= self.budget\n        for i in range(m):\n            problem += pulp.lpDot(picks, self.positions[i]) == formation[i]\n        return problem\n\n\n\nBacktesting\nBy solving the team picking problem for all rounds, we can backtest our performance in the season. Before backtesting, let’s get the set of valid formations \\(\\mathcal{F}\\):\n\n\n[\n│   Formation(goalkeeper=1, defender=3, winger=0, midfielder=4, forward=3, coach=1),\n│   Formation(goalkeeper=1, defender=3, winger=0, midfielder=5, forward=2, coach=1),\n│   Formation(goalkeeper=1, defender=2, winger=2, midfielder=3, forward=3, coach=1),\n│   Formation(goalkeeper=1, defender=2, winger=2, midfielder=4, forward=2, coach=1),\n│   Formation(goalkeeper=1, defender=2, winger=2, midfielder=5, forward=1, coach=1),\n│   Formation(goalkeeper=1, defender=3, winger=2, midfielder=3, forward=2, coach=1),\n│   Formation(goalkeeper=1, defender=3, winger=2, midfielder=4, forward=1, coach=1)\n]\n\n\n\nNow that we know what our formation constraints, we’re ready to backtest. Starting with a budget of C$ 100, for each round let’s:\n\nPredict each player’s score based on their performance on previous rounds;\nPick the team with the best total score;\nAdd the sum of the team player’s appreciation to our budget.\n\n\ndef backtest(\n    players: pl.DataFrame, predict: Callable, initial_budget: float = 100.0\n) -&gt; pl.DataFrame:\n    rounds = players.get_column(\"round\").max()\n    budget = [None] * rounds\n    teams = [None] * rounds\n    budget[0] = initial_budget\n    for round in range(rounds):\n        if round &gt; 0:\n            budget[round] = budget[round - 1] + appreciation\n        data = players.filter(pl.col(\"round\") &lt; round + 1)\n        candidates = players.filter(pl.col(\"round\") == round + 1)\n        candidates = predict(data, candidates)\n        problem = Problem(\n            scores=candidates.get_column(\"prediction\"),\n            values=candidates.get_column(\"value\"),\n            positions=candidates.get_column(\"position\").to_dummies(),\n            budget=budget[round],\n            formations=formations,\n        )\n        picks = problem.solve()\n        team = candidates.filter(picks == 1)\n        teams[round] = team\n        appreciation = team.get_column(\"appreciation\").sum()\n    teams = pl.concat(teams)\n    return teams\n\nBefore diving into predictions, let’s start with a couple of hypothetical backtests, using the actual observed scores to pick our teams. Backtesting this strategy, the first team we pick is:\n\n\nshape: (12, 13)\n┌───────┬────────┬──────┬──────────┬───┬─────────┬────────┬──────┬────────────┐\n│ round ┆ player ┆ team ┆ position ┆ … ┆ minimum ┆ versus ┆ home ┆ prediction │\n│ ---   ┆ ---    ┆ ---  ┆ ---      ┆   ┆ ---     ┆ ---    ┆ ---  ┆ ---        │\n│ i64   ┆ i64    ┆ i64  ┆ i64      ┆   ┆ f64     ┆ i64    ┆ i32  ┆ f64        │\n╞═══════╪════════╪══════╪══════════╪═══╪═════════╪════════╪══════╪════════════╡\n│ 1     ┆ 71571  ┆ 356  ┆ 1        ┆ … ┆ 3.19    ┆ 1371   ┆ 1    ┆ 11.0       │\n│ 1     ┆ 42145  ┆ 294  ┆ 2        ┆ … ┆ 2.75    ┆ 290    ┆ 1    ┆ 15.8       │\n│ 1     ┆ 105584 ┆ 264  ┆ 2        ┆ … ┆ 2.75    ┆ 263    ┆ 0    ┆ 10.5       │\n│ 1     ┆ 107110 ┆ 280  ┆ 3        ┆ … ┆ 2.3     ┆ 286    ┆ 0    ┆ 14.9       │\n│ …     ┆ …      ┆ …    ┆ …        ┆ … ┆ …       ┆ …      ┆ …    ┆ …          │\n│ 1     ┆ 39148  ┆ 282  ┆ 5        ┆ … ┆ 7.2     ┆ 285    ┆ 1    ┆ 18.9       │\n│ 1     ┆ 89840  ┆ 276  ┆ 5        ┆ … ┆ 5.42    ┆ 293    ┆ 1    ┆ 27.1       │\n│ 1     ┆ 104530 ┆ 294  ┆ 5        ┆ … ┆ 2.3     ┆ 290    ┆ 1    ┆ 11.0       │\n│ 1     ┆ 97341  ┆ 276  ┆ 6        ┆ … ┆ 0.0     ┆ 293    ┆ 1    ┆ 9.52       │\n└───────┴────────┴──────┴──────────┴───┴─────────┴────────┴──────┴────────────┘\n\n\n\nAnd we can plot out cumulative performance during the season:\n\n\n\n\n\nThis might seem like a perfect campaign at first, but it’s possible that, early in the season, we didn’t have enough budget to pick the best scoring teams. To test this hypothesis, we backtest the same strategy with unlimited budget from the start:\n\n\n\n\n\nBoth runs are nearly identical, which is evidence that focusing on appreciation is not so important if we have accurate predictions for the scores. If we predict scores perfectly, we get a near perfect run.\nTo put our backtests into perspective, the 2022 season champion had a total score of 3434.37. This is very impressive and not very far from the near perfect run."
  },
  {
    "objectID": "blog/fantasy-football/index.html#score-prediction",
    "href": "blog/fantasy-football/index.html#score-prediction",
    "title": "Picking a fantasy football team",
    "section": "Score prediction",
    "text": "Score prediction\nFor each round, we must predict \\(\\hat{s}\\), the vector of score predictions. To estimate the model parameters, we use the data from previous rounds.\nHowever, during the first round, we don’t have any previous data to train our model. In this case, we need to include prior information. One way to do that would be to use data from previous seasons. However, we know a variable where this information is already encoded: the player value. Each season starts with players valued according to their past performance. Knowing this, all our models start with \\(\\hat{s} = v\\) in the first round.\nLet’s use Bambi (Capretto et al. 2022) and its default priors to fit our models, let’s not delve into convergence diagnostics, since we are more interested in the average of the predictive posteriors and the backtest itself is measure of the prediction quality.\nOne question that arises here is: why not use non-parametric models such as gradient boosted trees or neural nets? After some experimentation, I concluded they are not a good fit for this problem: either because they assume independence between observations, or because they are too data hungry. Also, tuning these models for backtests might lead us into a rabbit hole (Bailey et al. 2013).\n\nPlayer average\n\\[\n\\begin{align*}\n\\mathbf{\\hat{s}} = \\mathbf{Z} \\mathbf{\\beta} \\\\\n\\mathbf{s} \\sim N(\\mathbf{\\hat{s}}, \\sigma),\n\\end{align*}\n\\]\nwhere\n\\(\\mathbf{Z}\\) is a dummy-encoded matrix of players;\n\\(\\mathbf{\\beta}\\) is a vector of parameters for each player.\nIn this model, \\(\\mathbf{\\beta}\\) is simply a vector of player averages. Let’s also consider that players that show up in the middle of the season have an average of zero before their first round. This will be our baseline model.\n\n\n\n\n\n\n\nPlayer random effects\n\\[\n\\begin{align*}\n\\mathbf{\\hat{s}} = \\alpha + \\mathbf{Z} \\mathbf{b} \\\\\n\\mathbf{b} \\sim N(0, \\sigma_b),\n\\end{align*}\n\\]\nwhere\n\\(\\alpha\\) is an intercept and\n\\(\\mathbf{b}\\) is a vector of random effects for each player.\nThis model performs significantly better than the average model, possibly because of the partial pooling between the random effects, that pulls large effects towards the overall mean (Clark 2019). In our dataset, it’s common for players that played one or two games to have large averages by chance.\n\n\n\n\n\n\n\nFixture mixed effects\n\\[\n\\mathbf{\\hat{s}} = \\alpha + \\mathbf{X} \\mathbf{\\beta} + \\mathbf{Z} \\mathbf{b},\n\\]\nwhere\n\\(\\mathbf{X}\\) is a matrix of dummy-encoded team, versus and home variables; \\(\\mathbf{\\beta}\\) is a vector of fixed effects.\nThis brings more context to our predictions. It also provides a reasonable way to predict a new player, by setting their \\(b = 0\\) (the mean of the random effects)."
  },
  {
    "objectID": "blog/fantasy-football/index.html#further-ideas",
    "href": "blog/fantasy-football/index.html#further-ideas",
    "title": "Picking a fantasy football team",
    "section": "Further ideas",
    "text": "Further ideas\nWe developed a comprehensive framing for the fantasy football team picking problem, but it wasn’t enough to win the 2022 Cartola season. I have some other ideas for this, such as:\n\nenriching our data with player scouts and including them in our model;\nincoporating prior information via priors;\ntesting strategies that balance score and appreciation,\n\nbut I won’t pursue them for now.\nI suppose expert human players have a certain edge over statistical models in fantasy leagues, due to the fact that there are all sorts of relevant data that are not quantified in public datasets.\nTo be fair, I’m sure that’s not true for all sports everywhere, but it seems to be the case for brazilian soccer. No wonder it’s often refered to as a “little box full of surprises”."
  }
]